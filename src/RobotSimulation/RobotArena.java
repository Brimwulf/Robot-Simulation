package RobotSimulation;
import javax.swing.*;
import java.io.*;
import java.util.Random;
import java.util.ArrayList;

public class RobotArena implements Serializable {
    private int x_size;
    private int y_size;
    private ArrayList<Robot> robot;

    public int getNumRobots() {
        return robot.size();
    }

    public int getX_size() {
        return x_size;
    }

    public int getY_size() {
        return y_size;
    }

    public RobotArena(int x_size, int y_size) {
        this.x_size = x_size;
        this.y_size = y_size;
        //this.numRobots = numRobots;
        robot = new ArrayList<>();
    }

    /**
     * Is the robot at this x, y position?
     * @param sx    x position.
     * @param sy    y position.
     * @param rNum  the robot being tested.
     * @return      true if robot at xy is found, false otherwise.
     */
    public boolean isHere(int rNum, int sx, int sy) {
        if(rNum < robot.size()) {
            Robot r = robot.get(rNum);
            return r.getX() == sx && r.getY() == sy;
        }
        return false;
    }

    public void addRobot(int num) {
        Random randomGenerator = new Random();
        int rX, rY;
        Robot newRobot;
        do {
            rX = randomGenerator.nextInt(x_size-2)+1;
            rY = randomGenerator.nextInt(y_size-2)+1;
            newRobot = new Robot(num, rX, rY, Direction.getRandomDirection());
        }
        while (isHere(num -1, rX, rY));

        robot.add(newRobot);
    }

    public String toString(int numRobots) {
        System.out.println("Arena of size " + x_size + " by " + y_size + " with "
                + numRobots + " robot(s)");
        String returnstr = "";
        for (int i = 0; i < numRobots; i++) {
            returnstr += robot.get(i) + "\n";   // Appending robot information to return string.
        }
        return returnstr;
    }

    public void showRobots(ConsoleCanvas c) {
        for (Robot value : robot) {
            //Accessing robot number i in robot and accessing the displayRobot method.
            value.displayRobot(c);
        }
    }

    private boolean isWithinBounds(int x, int y) {
        return x > 0 && x < x_size-1 && y > 0 && y < y_size-1; // checks whether new x, y coords are within the arena.
    }

    private boolean isOccupied(int x, int y, Robot testRobot) {
        for (Robot other : robot) {
            if(other != testRobot && other.getX() == x && other.getY() == y) {
                return true; // The x, y coords are occupied by another robot.
            }
        }
        return false;
    }

    public boolean canMoveHere(Robot r){
        int[] newPos = r.calculateNewPosition();
        int newX = newPos[0];
        int newY = newPos[1];
        // Uses the x, y coords generated by calculateNewPosition()

        return isWithinBounds(newX, newY) && !isOccupied(newX, newY, r);
    }

    public void moveAll(RobotArena arena) {
        for(Robot item : arena.robot) {
            item.tryToMove(arena);
        }
    }

    // This function is for handling the interfacing of files with the code.
    private static String getFilePath(String dialogTitle, int dialogType) {
        // Creating an instance of JFileChooser called fileChooser
        JFileChooser fileChooser = new JFileChooser();
        fileChooser.setDialogTitle(dialogTitle);    // The dialog title is passed in when function is called.
        int userSelection;

        // This block determines whether the file is being read or saved to. For either, the behaviour changes.
        if(dialogType == JFileChooser.SAVE_DIALOG) {
            userSelection = fileChooser.showSaveDialog(null);
        } else {
            userSelection = fileChooser.showOpenDialog(null);
        }

        // If userSelection is set to 0 by either case and thus = to APPROVE_OPTION, this block executes.
        if(userSelection == JFileChooser.APPROVE_OPTION) {
            return fileChooser.getSelectedFile().getAbsolutePath();
        } else {
            System.out.println("No file selected.");
            return null;
        }
    }

    // This method handles writing the object and its contents to a file.
    private boolean writeArenaToFile(String fileName) {
        // This try catch block ensures that the filestream executes properly and closes once finished.
        // The FileOutputStream is wrapped within the ObjectOutputStream
        try(FileOutputStream fileOut = new FileOutputStream(fileName);
            ObjectOutputStream out = new ObjectOutputStream(fileOut)) {
            out.writeObject(this);  // This line writes the object into the file.
            return true;    // Sets the output to true because the file was written to successfully
        } catch(IOException e) {
            e.printStackTrace();
            System.out.println("Error occurred while writing to file...");
            return false;
        }
    }

    // Method to save the current arena state
    public void saveArena() {
        String fileName = getFilePath("Save arena to file", JFileChooser.SAVE_DIALOG);
        if(fileName != null) {
            if(writeArenaToFile(fileName)) {    // Calls the write arena function on the file path.
                System.out.println("Saved arena to file " + fileName);
            } else {
                System.out.println("Failed to save arena to file");
            }
        }
    }

    private static RobotArena readArenaFromFile(String fileName) {
        // Try catch block for reading from a file. Again ensuring proper execution and closing
        try (FileInputStream fileIn = new FileInputStream(fileName);
             ObjectInputStream in = new ObjectInputStream(fileIn)) {
            // This line creates a new arena and assigns it the one from the file
            RobotArena arena = (RobotArena) in.readObject();
            System.out.println("Read arena from " + fileName);
            return arena;   // return the loaded arena.
        } catch(IOException | ClassNotFoundException e) {
            e.printStackTrace();
            System.out.println("Error occurred while reading arena file...");
            return null;
        }
    }

    // This method handles the logic for getting the file and then reading from it.
    public static RobotArena loadArena() {
        System.out.println("Attempting to load an arena...");

        String fileName = getFilePath("Load arena from file", JFileChooser.OPEN_DIALOG);
        if(fileName != null) {
            return readArenaFromFile(fileName);
        }
        System.out.println("Failed to load arena.");
        return null;
    }

    public static void main(String[] args) {
        RobotArena a = new RobotArena(20,20);
        a.addRobot(1);
        a.addRobot(2);
        a.addRobot(3);
        System.out.println(a.toString(3));
    }
}
